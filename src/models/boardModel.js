import Joi from "joi";
import { ObjectId, ReturnDocument } from "mongodb";
import { GET_DB } from "~/config/mongodb";
import { BOARD_TYPE } from "~/utils/constants";
import { OBJECT_ID_RULE, OBJECT_ID_RULE_MESSAGE } from "~/utils/validators";
import { columnModel } from "~/models/columnModel";
import { cardModel } from "~/models/cardModel";
// Define Collection (name & Schema)

const BOARD_COLLECTION_NAME = "boards";
const BOARD_COLLECTION_SCHEMA = Joi.object({
  title: Joi.string().required().min(3).max(50).trim().strict(),
  slug: Joi.string().required().min(3).trim().strict(),
  description: Joi.string().required().min(3).max(256).trim().strict(),
  type: Joi.string().valid(BOARD_TYPE.PUBLIC, BOARD_TYPE.PRIVATE).required(),
  // L∆∞u √Ω c√°c item trong m·∫£ng cardOrderIds l√† ObjectId n√™n c·∫ßn th√™m pattern cho chu·∫©n nh√©, (l√∫c quay video s·ªë 57 m√¨nh qu√™n nh∆∞ng sang ƒë·∫ßu video s·ªë 58 s·∫Ω c√≥ nh·∫Øc l·∫°i v·ªÅ c√°i n√†y.)
  columnOrderIds: Joi.array()
    .items(Joi.string().pattern(OBJECT_ID_RULE).message(OBJECT_ID_RULE_MESSAGE))
    .default([]),

  createdAt: Joi.date().timestamp("javascript").default(Date.now),
  updatedAt: Joi.date().timestamp("javascript").default(null),
  _destroy: Joi.boolean().default(false),
});

// Ch·ªâ ƒë·ªãnh ra nh·ªØng tr∆∞·ªùng m√† ch√∫ng ta kh√¥ng cho ph√©p c·∫≠p nh·∫≠ttrong h√†m update
const INVALID_UPDATE_FIELDS = ["_id", "createdAt"];

const validateBeforeCreate = async (data) => {
  return await BOARD_COLLECTION_SCHEMA.validateAsync(data, {
    abortEarly: false,
  });
};

const createNew = async (data) => {
  try {
    const validData = await validateBeforeCreate(data);
    console.log("üöÄ ~ createNew ~ validData:", validData);
    const createdBoard = await GET_DB()
      .collection(BOARD_COLLECTION_NAME)
      .insertOne(validData);
    return createdBoard;
  } catch (error) {
    throw new Error(error);
  }
};
const findOneById = async (id) => {
  try {
    const result = await GET_DB()
      .collection(BOARD_COLLECTION_NAME)
      .findOne({
        _id: new ObjectId(id),
      });
    return result;
  } catch (error) {
    throw new Error(error);
  }
};
//Query t·ªïng h·ª£p (aggregate) ƒë·ªÉ l·∫•y to√†n b·ªô Columns v√† Cards thu·ªôc v·ªÅ Board
const getDetails = async (id) => {
  try {
    // const result = await GET_DB()
    //   .collection(BOARD_COLLECTION_NAME)
    //   .findOne({
    //     _id: new ObjectId(id),
    //   });
    const result = await GET_DB()
      .collection(BOARD_COLLECTION_NAME)
      .aggregate([
        {
          $match: {
            _id: new ObjectId(id),
            _destroy: false,
          },
        },
        {
          $lookup: {
            from: columnModel.COLUMN_COLLECTION_NAME,
            localField: "_id",
            foreignField: "boardId",
            as: "columns",
          },
        },
        {
          $lookup: {
            from: cardModel.CARD_COLLECTION_NAME,
            localField: "_id",
            foreignField: "boardId",
            as: "cards",
          },
        },
      ])
      .toArray();

    return result[0] || null;
  } catch (error) {
    throw new Error(error);
  }
};

// Nhi·ªám v·ª• c·ªßa func n√†y l√† push 1 c√°i gi√° tr·ªã columnId v√†o m·∫£ng columnOrderIds
const pushColumnOrderIds = async (column) => {
  try {
    const result = await GET_DB()
      .collection(BOARD_COLLECTION_NAME)
      .findOneAndUpdate(
        { _id: new ObjectId(column.boardId) },
        { $push: { columnOrderIds: new ObjectId(column._id) } },
        { ReturnDocument: "after" }
      );
    return result;
  } catch (error) {
    throw new Error(error);
  }
};

const update = async (boardId, updateData) => {
  try {
    // L·ªçc nh·ªØng field m√† ch√∫ng ta kh√¥ng cho c·∫≠p nh·∫≠t linh tinh
    Object.keys(updateData).forEach((item) => {
      if (INVALID_UPDATE_FIELDS.includes(item)) {
        delete updateData[item];
      }
    });
    const result = await GET_DB()
      .collection(BOARD_COLLECTION_NAME)
      .findOneAndUpdate(
        { _id: new ObjectId(boardId) },
        { $set: updateData },
        { ReturnDocument: "after" } // tr·∫£ v·ªÅ k·∫øt qu·∫£ m·ªõi sau khi c·∫≠p nh·∫≠t
      );
    return result;
  } catch (error) {
    throw new Error(error);
  }
};
export const boardModel = {
  BOARD_COLLECTION_NAME,
  BOARD_COLLECTION_SCHEMA,
  createNew,
  findOneById,
  getDetails,
  pushColumnOrderIds,
  update,
};

// boardId: 6895d82b215dae5ac43ed80f
// columnsId: 689603b36f13cb870d3b4095
// cardId : 689604a96f13cb870d3b4097
